name: Prompt Runner with Context

on:
  push:
    branches:
      - master

jobs:
  run-prompt:
    if: contains(github.event.head_commit.message, 'prompt:')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Extrair prompt do commit
        id: get-prompt
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          PROMPT=$(echo "$COMMIT_MSG" | sed -n 's/.*prompt:\(.*\)/\1/p')
          echo "prompt=$PROMPT" >> $GITHUB_OUTPUT

      - name: Preparar contexto do código
        id: get-context
        run: |
          # Lista todos os arquivos relevantes do projeto (excluindo .git)
          CONTEXT=$(find . -type f -not -path "./.git/*" -exec echo "==== {} ====" \; -exec cat {} \;)
          # Limitar tamanho do contexto para não estourar a API (ex: 20.000 chars)
          CONTEXT=$(echo "$CONTEXT" | head -c 20000)
          echo "context=$CONTEXT" >> $GITHUB_OUTPUT

      - name: Rodar GPT com contexto do projeto
        id: ai
        run: |
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "{
              \"model\": \"gpt-4o-mini\",
              \"messages\": [
                {\"role\": \"system\", \"content\": \"Você é um assistente que edita código. Analise o contexto do projeto e aplique mudanças somente conforme o prompt. Responda estritamente com JSON no formato [{\\\"path\\\":\\\"arquivo.ext\\\",\\\"content\\\":\\\"novo conteúdo\\\"}]. Não explique nada.\"},
                {\"role\": \"user\", \"content\": \"CONTEXTO DO PROJETO:\n${{ steps.get-context.outputs.context }}\n\nPROMPT DO USUÁRIO:\n${{ steps.get-prompt.outputs.prompt }}\"}
              ]
            }" | jq -r '.choices[0].message.content')

          echo "$RESPONSE" > changes.json
          echo "Resposta do modelo:"
          cat changes.json

      - name: Validar JSON
        run: |
          cat changes.json | jq empty

      - name: Aplicar mudanças nos arquivos
        run: |
          cat changes.json | jq -c '.[]' | while read i; do
            FILE=$(echo $i | jq -r '.path')
            CONTENT=$(echo $i | jq -r '.content')
            mkdir -p $(dirname "$FILE")
            echo "$CONTENT" > "$FILE"
          done

      - name: Commit automático
        run: |
          git config --global user.name "prompt-bot"
          git config --global user.email "bot@example.com"
          git add .
          git diff --cached --quiet || git commit -m "AI applied changes for prompt"
          git push
